<?xml version="1.0" encoding="iso-8859-1" ?>

<project name="API Top Level build" default="archive" basedir=".">
	<description>
			This is the top level file for API's.
	</description>
	    
	<!-- ===================================================================================== -->
	<!-- ==================================== Globals ======================================== -->
	<!-- ===================================================================================== -->
	
  <!-- 
  	Set global properties for top level build.
  	Assumes a directory structure of ...
  	
  			Root_Dev_Directory/		
  												|- /src  		** All source code **
  												|- /classes	** All classes ** 
  												|- /docs		** API docs **
  												|- /lib			** All jars can go here **
  -->
  
  <property name="Ocean" value="Top Level Build for API"/>
  <property name="project.src" location="src"/>
  <property name="project.classes" location="classes"/>
  <property name="project.lib"  location="lib"/>
  <property name="project.docs"  location="docs"/>
  
  <property name="project.author" value="Ray McBride"/>
  
  
  <!-- The package class root. Use this directory for rebuild. Never delete the classes dir! -->
  <property name="Package_Class_Root" location="${project.classes}/com/mcbride"/>
  
  
 	
 	
 		<!-- ===================================================================================== -->
		<!-- ==================================== Imports ======================================== -->
		<!-- ===================================================================================== -->
		
		<!-- Import the javac.compiler.classpath options -->
  	<import file="ant_build/compiler-options.xml" />
  	
  	<!-- Import the javadoc  options -->
  	<import file="ant_build/javadoc-options.xml" />
 	
 	
 	
 	

	<!-- ======================================================================================= -->
	<!-- ==================================== Targets ========================================== -->
	<!-- ======================================================================================= -->
	
	<!-- Begin targets -->
	
	
	<!-- 
			All builds dependent upon init creating missing directories
			- If these directories already exist then nothing will happen.
			Also create the time stamps - These are global properties that 
			can be used anywhere within this build 
	-->
  <target name="init">
  	<!-- Create the date and time stamps : Use a UK locale -->
    <tstamp>
    	<format property="TODAY_UK" pattern="dd/MM/yyyy" locale="en"/>
    	<format property="TIME_UK" pattern="hh:mm" locale="en"/>
  	</tstamp>
    <mkdir dir="${project.classes}"/>
    <mkdir dir="${project.lib}"/>
  </target>
  
  	
	
	<target name="cvs_checking" description="Check in code">
		<echo message="There is currently no support for CVS"/>
	</target>
	
 	
 	<!-- 
 			Java Compiler target.
 			This will compile all the src code under the project.src location
 			into the project.classes directory using the same structure as package names.
 			If you need to change the settings just change the values in the properties 
 			defined above for the relevant setting. Please dont change anything here
 	-->
  <target name="compile" depends="init" description="compile the source " >
  		
	    <!-- Compile the java code from ${project.src} into ${project.classes} -->
	    <javac 
	    	srcdir="${project.src}" 
	    	destdir="${project.classes}" 
	    	verbose="${java.compiler.verbose}"
	    	compiler="${java.compiler}"
	    	encoding="${java.compiler.encoding}"
	    	optimize="${java.compiler.optimize}"
	    	deprecation="${java.compiler.deprecation}"
	    	source="${java.compiler.source}">
	    	<!-- The java compiler classpath -->
	    	<classpath refid="javac.compiler.classpath"/>
		</javac>
  </target>
  
  
  <!--
  		The Java Archiver target
  		
  -->
  <target name="archive" depends="compile" description="archive the source" >

    <jar 
    	destfile="${project.lib}/ocean.jar" 
    	basedir="${project.classes}" 
    	includes="**/*">
    		<manifest>
					<attribute name="Built-By" value="${project.author}"/>
					<attribute name="build-Date" value="${TODAY_UK}-${TIME_UK}"/>
				</manifest>
    	</jar>
    
  </target>

  <target name="clean" description="clean up" >
    <!-- Delete the ${project.classes} and 
    all jars-->
    <delete dir="${Package_Class_Root}"/>
    <delete>
		    <fileset dir="${project.classes}" includes="*.jar"/>
		</delete>
		<delete>
				<fileset dir="${project.lib}" includes="*.jar"/>
		</delete>
  </target>
  
  <target name="full_clean" depends="clean" description="clean up" >
		<delete dir="${project.docs}"/>
  </target>
  
  <target name="touch" description="touch files">
  	<touch>
  		<fileset dir="${project.src}"/>
  	</touch>
  </target>
  
  
  <!--  Rules to create the java documentation
  	Use packageList="packages.list" to specify from a list
  	the packages to be documented
  -->
  <target name="javadoc" description="javadoc"> 
  	<mkdir dir="${project.docs}"/>
		<javadoc
			sourcepath="${project.src}"
			packagenames="**/*"
			destdir="${project.docs}"
			author="${javadoc.author}"
			version="${javadoc.version}"
			use="${javadoc.use}"
			windowtitle="${javadoc.windowtitle}"
			source="${javadoc.source}"
			linksource="${javadoc.linksource}"
			classpathref="javac.compiler.classpath">
			<doctitle><![CDATA[<h1>${javadoc.doctitle}</h1>]]></doctitle>
			<bottom><![CDATA[<i>${javadoc.bottom}</i>]]></bottom> 
		</javadoc>
  </target>  
  
  <target name="clean_build" depends="clean, compile, archive" description="Clean build" />
  
  <target name="full_build" depends="full_clean, compile, archive, javadoc" description="Full build" />
  
  
	<target name ="execute" description="Execute a Java program" >

		<java classname="controller.OceanController" fork="true">
			<classpath refid="javac.compiler.classpath"/>
		</java>

	</target>


  <!--  END TARGETS -->
  
</project>